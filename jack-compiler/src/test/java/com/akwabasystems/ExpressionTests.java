
package com.akwabasystems;

import com.akwabasystems.parsing.CompilationEngine;
import com.akwabasystems.parsing.JackTokenizer;
import com.akwabasystems.parsing.Tokenizer;
import junit.framework.TestCase;


public class ExpressionTests extends TestCase {
    
    
    public void testTerminalOrKeywordConstants() {
        StringBuilder input = new StringBuilder();
        input.append("class Main {\n")
             .append("  function void test() {  // Added to test Jack syntax that is not use in\n")
             .append("    var String s;       // the Square files.\n")
             .append("    var Array a;\n")
             .append("\n")
             .append("    if (false) {\n")
             .append("      let s = \"string constant\";\n")
             .append("      let s = null;\n")
             .append("    }\n")
             .append("  }\n")
            .append("}\n");
        
        Tokenizer tokenizer = new JackTokenizer(input.toString());
        CompilationEngine compiler = new CompilationEngine(tokenizer);
        compiler.compileClass();
        
        StringBuilder output = new StringBuilder();
        output.append("<class>\n")
              .append("<keyword> class </keyword>\n")
              .append("<identifier> Main </identifier>\n")
              .append("<symbol> { </symbol>\n")
              .append("<subroutineDec>\n")
              .append("<keyword> function </keyword>\n")
              .append("<keyword> void </keyword>\n")
              .append("<identifier> test </identifier>\n")
              .append("<symbol> ( </symbol>\n")
              .append("<parameterList>\n")
              .append("</parameterList>\n")
              .append("<symbol> ) </symbol>\n")
              .append("<subroutineBody>\n")
              .append("<symbol> { </symbol>\n")
              .append("<varDec>\n")
              .append("<keyword> var </keyword>\n")
              .append("<identifier> String </identifier>\n")
              .append("<identifier> s </identifier>\n")
              .append("<symbol> ; </symbol>\n")
              .append("</varDec>\n")
              .append("<varDec>\n")
              .append("<keyword> var </keyword>\n")
              .append("<identifier> Array </identifier>\n")
              .append("<identifier> a </identifier>\n")
              .append("<symbol> ; </symbol>\n")
              .append("</varDec>\n")
              .append("<statements>\n")
              .append("<ifStatement>\n")
              .append("<keyword> if </keyword>\n")
              .append("<symbol> ( </symbol>\n")
              .append("<expression>\n")
              .append("<term>\n")
              .append("<keyword> false </keyword>\n")
              .append("</term>\n")
              .append("</expression>\n")
              .append("<symbol> ) </symbol>\n")
              .append("<symbol> { </symbol>\n")
              .append("<statements>\n")
              .append("<letStatement>\n")
              .append("<keyword> let </keyword>\n")
              .append("<identifier> s </identifier>\n")
              .append("<symbol> = </symbol>\n")
              .append("<expression>\n")
              .append("<term>\n")
              .append("<stringConstant> string constant </stringConstant>\n")
              .append("</term>\n")
              .append("</expression>\n")
              .append("<symbol> ; </symbol>\n")
              .append("</letStatement>\n")
              .append("<letStatement>\n")
              .append("<keyword> let </keyword>\n")
              .append("<identifier> s </identifier>\n")
              .append("<symbol> = </symbol>\n")
              .append("<expression>\n")
              .append("<term>\n")
              .append("<keyword> null </keyword>\n")
              .append("</term>\n")
              .append("</expression>\n")
              .append("<symbol> ; </symbol>\n")
              .append("</letStatement>\n")
              .append("</statements>\n")
              .append("<symbol> } </symbol>\n")
              .append("</ifStatement>\n")
              .append("</statements>\n")
              .append("<symbol> } </symbol>\n")
              .append("</subroutineBody>\n")
              .append("</subroutineDec>\n")
              .append("<symbol> } </symbol>\n")
              .append("</class>");
        assertEquals(compiler.toXML(), output.toString());
    }


    public void testUnaryOperatorTerm() {
        StringBuilder input = new StringBuilder();
        input.append("class Main {\n")
             .append("  function void test() {\n")
             .append("    let i = -j;\n")
             .append("    let j = j + 1;\n")
             .append("  }\n")
            .append("}\n");
        
        Tokenizer tokenizer = new JackTokenizer(input.toString());
        CompilationEngine compiler = new CompilationEngine(tokenizer);
        compiler.compileClass();

        StringBuilder output = new StringBuilder();
        output.append("<class>\n")
              .append("<keyword> class </keyword>\n")
              .append("<identifier> Main </identifier>\n")
              .append("<symbol> { </symbol>\n")
              .append("<subroutineDec>\n")
              .append("<keyword> function </keyword>\n")
              .append("<keyword> void </keyword>\n")
              .append("<identifier> test </identifier>\n")
              .append("<symbol> ( </symbol>\n")
              .append("<parameterList>\n")
              .append("</parameterList>\n")
              .append("<symbol> ) </symbol>\n")
              .append("<subroutineBody>\n")
              .append("<symbol> { </symbol>\n")
              .append("<statements>\n")
              .append("<letStatement>\n")
              .append("<keyword> let </keyword>\n")
              .append("<identifier> i </identifier>\n")
              .append("<symbol> = </symbol>\n")
              .append("<expression>\n")
              .append("<term>\n")
              .append("<symbol> - </symbol>\n")
              .append("<term>\n")
              .append("<identifier> j </identifier>\n")
              .append("</term>\n")
              .append("</term>\n")
              .append("</expression>\n")
              .append("<symbol> ; </symbol>\n")
              .append("</letStatement>\n")
              .append("<letStatement>\n")
              .append("<keyword> let </keyword>\n")
              .append("<identifier> j </identifier>\n")
              .append("<symbol> = </symbol>\n")
              .append("<expression>\n")
              .append("<term>\n")
              .append("<identifier> j </identifier>\n")
              .append("</term>\n")
              .append("<symbol> + </symbol>\n")
              .append("<term>\n")
              .append("<integerConstant> 1 </integerConstant>\n")
              .append("</term>\n")
              .append("</expression>\n")
              .append("<symbol> ; </symbol>\n")
              .append("</letStatement>\n")
              .append("</statements>\n")
              .append("<symbol> } </symbol>\n")
              .append("</subroutineBody>\n")
              .append("</subroutineDec>\n")
              .append("<symbol> } </symbol>\n")
              .append("</class>");
        assertEquals(compiler.toXML(), output.toString());
    }

    
    public void testOperatorTerms() {
        StringBuilder input = new StringBuilder();
        input.append("class Main {\n")
             .append("  function void test() {\n")
             .append("    let i = i * (-j);\n")
             .append("    let j = j / (-2);   // note: unary negate constant 2\n")
             .append("  }\n")
             .append("}\n");
        
        Tokenizer tokenizer = new JackTokenizer(input.toString());
        CompilationEngine compiler = new CompilationEngine(tokenizer);
        compiler.compileClass();
        
        StringBuilder output = new StringBuilder();
        output.append("<class>\n")
              .append("<keyword> class </keyword>\n")
              .append("<identifier> Main </identifier>\n")
              .append("<symbol> { </symbol>\n")
              .append("<subroutineDec>\n")
              .append("<keyword> function </keyword>\n")
              .append("<keyword> void </keyword>\n")
              .append("<identifier> test </identifier>\n")
              .append("<symbol> ( </symbol>\n")
              .append("<parameterList>\n")
              .append("</parameterList>\n")
              .append("<symbol> ) </symbol>\n")
              .append("<subroutineBody>\n")
              .append("<symbol> { </symbol>\n")
              .append("<statements>\n")
              .append("<letStatement>\n")
              .append("<keyword> let </keyword>\n")
              .append("<identifier> i </identifier>\n")
              .append("<symbol> = </symbol>\n")
              .append("<expression>\n")
              .append("<term>\n")
              .append("<identifier> i </identifier>\n")
              .append("</term>\n")
              .append("<symbol> * </symbol>\n")
              .append("<term>\n")
              .append("<symbol> ( </symbol>\n")
              .append("<expression>\n")
              .append("<term>\n")
              .append("<symbol> - </symbol>\n")
              .append("<term>\n")
              .append("<identifier> j </identifier>\n")
              .append("</term>\n")
              .append("</term>\n")
              .append("</expression>\n")
              .append("<symbol> ) </symbol>\n")
              .append("</term>\n")
              .append("</expression>\n")
              .append("<symbol> ; </symbol>\n")
              .append("</letStatement>\n")
              .append("<letStatement>\n")
              .append("<keyword> let </keyword>\n")
              .append("<identifier> j </identifier>\n")
              .append("<symbol> = </symbol>\n")
              .append("<expression>\n")
              .append("<term>\n")
              .append("<identifier> j </identifier>\n")
              .append("</term>\n")
              .append("<symbol> / </symbol>\n")
              .append("<term>\n")
              .append("<symbol> ( </symbol>\n")
              .append("<expression>\n")
              .append("<term>\n")
              .append("<symbol> - </symbol>\n")
              .append("<term>\n")
              .append("<integerConstant> 2 </integerConstant>\n")
              .append("</term>\n")
              .append("</term>\n")
              .append("</expression>\n")
              .append("<symbol> ) </symbol>\n")
              .append("</term>\n")
              .append("</expression>\n")
              .append("<symbol> ; </symbol>\n")
              .append("</letStatement>\n")
              .append("</statements>\n")
              .append("<symbol> } </symbol>\n")
              .append("</subroutineBody>\n")
              .append("</subroutineDec>\n")
              .append("<symbol> } </symbol>\n")
              .append("</class>");
        assertEquals(compiler.toXML(), output.toString());
    }
    
    
    public void testParenthesizedExpression() {
        StringBuilder input = new StringBuilder();
        input.append("class Square {\n")
             .append("  function void moveRight() {\n")
             .append("    let x = (x + size) + 1;\n")
             .append("  }\n")
             .append("}\n");
        
        Tokenizer tokenizer = new JackTokenizer(input.toString());
        CompilationEngine compiler = new CompilationEngine(tokenizer);
        compiler.compileClass();
        
        StringBuilder output = new StringBuilder();
        output.append("<class>\n")
              .append("<keyword> class </keyword>\n")
              .append("<identifier> Square </identifier>\n")
              .append("<symbol> { </symbol>\n")
              .append("<subroutineDec>\n")
              .append("<keyword> function </keyword>\n")
              .append("<keyword> void </keyword>\n")
              .append("<identifier> moveRight </identifier>\n")
              .append("<symbol> ( </symbol>\n")
              .append("<parameterList>\n")
              .append("</parameterList>\n")
              .append("<symbol> ) </symbol>\n")
              .append("<subroutineBody>\n")
              .append("<symbol> { </symbol>\n")
              .append("<statements>\n")
              .append("<letStatement>\n")
              .append("<keyword> let </keyword>\n")
              .append("<identifier> x </identifier>\n")
              .append("<symbol> = </symbol>\n")
              .append("<expression>\n")
              .append("<term>\n")
              .append("<symbol> ( </symbol>\n")
              .append("<expression>\n")
              .append("<term>\n")
              .append("<identifier> x </identifier>\n")
              .append("</term>\n")
              .append("<symbol> + </symbol>\n")
              .append("<term>\n")
              .append("<identifier> size </identifier>\n")
              .append("</term>\n")
              .append("</expression>\n")
              .append("<symbol> ) </symbol>\n")
              .append("</term>\n")
              .append("<symbol> + </symbol>\n")
              .append("<term>\n")
              .append("<integerConstant> 1 </integerConstant>\n")
              .append("</term>\n")
              .append("</expression>\n")
              .append("<symbol> ; </symbol>\n")
              .append("</letStatement>\n")
              .append("</statements>\n")
              .append("<symbol> } </symbol>\n")
              .append("</subroutineBody>\n")
              .append("</subroutineDec>\n")
              .append("<symbol> } </symbol>\n")
              .append("</class>");
        assertEquals(compiler.toXML(), output.toString());
    }
    
    
    public void testIfWithParenthesizedExpression() {
        StringBuilder input = new StringBuilder();
        input.append("class Square {\n")
             .append("  function void incSize() {\n")
             .append("    if ((y + size) < 254) {\n")
             .append("      let size = size + 2;\n")
             .append("    }\n")
             .append("  }\n")
             .append("}\n");
        
        Tokenizer tokenizer = new JackTokenizer(input.toString());
        CompilationEngine compiler = new CompilationEngine(tokenizer);
        compiler.compileClass();
        
        StringBuilder output = new StringBuilder();
        output.append("<class>\n")
              .append("<keyword> class </keyword>\n")
              .append("<identifier> Square </identifier>\n")
              .append("<symbol> { </symbol>\n")
              .append("<subroutineDec>\n")
              .append("<keyword> function </keyword>\n")
              .append("<keyword> void </keyword>\n")
              .append("<identifier> incSize </identifier>\n")
              .append("<symbol> ( </symbol>\n")
              .append("<parameterList>\n")
              .append("</parameterList>\n")
              .append("<symbol> ) </symbol>\n")
              .append("<subroutineBody>\n")
              .append("<symbol> { </symbol>\n")
              .append("<statements>\n")
              .append("<ifStatement>\n")
              .append("<keyword> if </keyword>\n")
              .append("<symbol> ( </symbol>\n")
              .append("<expression>\n")
              .append("<term>\n")
              .append("<symbol> ( </symbol>\n")
              .append("<expression>\n")
              .append("<term>\n")
              .append("<identifier> y </identifier>\n")
              .append("</term>\n")
              .append("<symbol> + </symbol>\n")
              .append("<term>\n")
              .append("<identifier> size </identifier>\n")
              .append("</term>\n")
              .append("</expression>\n")
              .append("<symbol> ) </symbol>\n")
              .append("</term>\n")
              .append("<symbol> &lt; </symbol>\n")
              .append("<term>\n")
              .append("<integerConstant> 254 </integerConstant>\n")
              .append("</term>\n")
              .append("</expression>\n")
              .append("<symbol> ) </symbol>\n")
              .append("<symbol> { </symbol>\n")
              .append("<statements>\n")
              .append("<letStatement>\n")
              .append("<keyword> let </keyword>\n")
              .append("<identifier> size </identifier>\n")
              .append("<symbol> = </symbol>\n")
              .append("<expression>\n")
              .append("<term>\n")
              .append("<identifier> size </identifier>\n")
              .append("</term>\n")
              .append("<symbol> + </symbol>\n")
              .append("<term>\n")
              .append("<integerConstant> 2 </integerConstant>\n")
              .append("</term>\n")
              .append("</expression>\n")
              .append("<symbol> ; </symbol>\n")
              .append("</letStatement>\n")
              .append("</statements>\n")
              .append("<symbol> } </symbol>\n")
              .append("</ifStatement>\n")
              .append("</statements>\n")
              .append("<symbol> } </symbol>\n")
              .append("</subroutineBody>\n")
              .append("</subroutineDec>\n")
              .append("<symbol> } </symbol>\n")
              .append("</class>");
        assertEquals(compiler.toXML(), output.toString());
    }
    
    
    public void testIfWithParenthesizedExpressions() {
        StringBuilder input = new StringBuilder();
        input.append("class Square {\n")
             .append("  function void incSize() {\n")
             .append("    if (((y + size) < 254) & ((x + size) < 510)) {\n")
             .append("      let size = size + 2;\n")
             .append("    }\n")
             .append("  }\n")
             .append("}\n");
        
        Tokenizer tokenizer = new JackTokenizer(input.toString());
        CompilationEngine compiler = new CompilationEngine(tokenizer);
        compiler.compileClass();

        StringBuilder output = new StringBuilder();
        output.append("<class>\n")
              .append("<keyword> class </keyword>\n")
              .append("<identifier> Square </identifier>\n")
              .append("<symbol> { </symbol>\n")
              .append("<subroutineDec>\n")
              .append("<keyword> function </keyword>\n")
              .append("<keyword> void </keyword>\n")
              .append("<identifier> incSize </identifier>\n")
              .append("<symbol> ( </symbol>\n")
              .append("<parameterList>\n")
              .append("</parameterList>\n")
              .append("<symbol> ) </symbol>\n")
              .append("<subroutineBody>\n")
              .append("<symbol> { </symbol>\n")
              .append("<statements>\n")
              .append("<ifStatement>\n")
              .append("<keyword> if </keyword>\n")
              .append("<symbol> ( </symbol>\n")
              .append("<expression>\n")
              .append("<term>\n")
              .append("<symbol> ( </symbol>\n")
              .append("<expression>\n")
              .append("<term>\n")
              .append("<symbol> ( </symbol>\n")
              .append("<expression>\n")
              .append("<term>\n")
              .append("<identifier> y </identifier>\n")
              .append("</term>\n")
              .append("<symbol> + </symbol>\n")
              .append("<term>\n")
              .append("<identifier> size </identifier>\n")
              .append("</term>\n")
              .append("</expression>\n")
              .append("<symbol> ) </symbol>\n")
              .append("</term>\n")
              .append("<symbol> &lt; </symbol>\n")
              .append("<term>\n")
              .append("<integerConstant> 254 </integerConstant>\n")
              .append("</term>\n")
              .append("</expression>\n")
              .append("<symbol> ) </symbol>\n")
              .append("</term>\n")
              .append("<symbol> &amp; </symbol>\n")
              .append("<term>\n")
              .append("<symbol> ( </symbol>\n")
              .append("<expression>\n")
              .append("<term>\n")
              .append("<symbol> ( </symbol>\n")
              .append("<expression>\n")
              .append("<term>\n")
              .append("<identifier> x </identifier>\n")
              .append("</term>\n")
              .append("<symbol> + </symbol>\n")
              .append("<term>\n")
              .append("<identifier> size </identifier>\n")
              .append("</term>\n")
              .append("</expression>\n")
              .append("<symbol> ) </symbol>\n")
              .append("</term>\n")
              .append("<symbol> &lt; </symbol>\n")
              .append("<term>\n")
              .append("<integerConstant> 510 </integerConstant>\n")
              .append("</term>\n")
              .append("</expression>\n")
              .append("<symbol> ) </symbol>\n")
              .append("</term>\n")
              .append("</expression>\n")
              .append("<symbol> ) </symbol>\n")
              .append("<symbol> { </symbol>\n")
              .append("<statements>\n")
              .append("<letStatement>\n")
              .append("<keyword> let </keyword>\n")
              .append("<identifier> size </identifier>\n")
              .append("<symbol> = </symbol>\n")
              .append("<expression>\n")
              .append("<term>\n")
              .append("<identifier> size </identifier>\n")
              .append("</term>\n")
              .append("<symbol> + </symbol>\n")
              .append("<term>\n")
              .append("<integerConstant> 2 </integerConstant>\n")
              .append("</term>\n")
              .append("</expression>\n")
              .append("<symbol> ; </symbol>\n")
              .append("</letStatement>\n")
              .append("</statements>\n")
              .append("<symbol> } </symbol>\n")
              .append("</ifStatement>\n")
              .append("</statements>\n")
              .append("<symbol> } </symbol>\n")
              .append("</subroutineBody>\n")
              .append("</subroutineDec>\n")
              .append("<symbol> } </symbol>\n")
              .append("</class>");
        assertEquals(compiler.toXML(), output.toString());
    }

    
    public void testPropertyAccessTerm() {
        StringBuilder input = new StringBuilder();
        input.append("class Main {\n")
             .append("  function void test() {\n")
             .append("    let a = a[2];\n")
             .append("  }\n")
            .append("}\n");
        
        Tokenizer tokenizer = new JackTokenizer(input.toString());
        CompilationEngine compiler = new CompilationEngine(tokenizer);
        compiler.compileClass();
        
        StringBuilder output = new StringBuilder();
        output.append("<class>\n")
              .append("<keyword> class </keyword>\n")
              .append("<identifier> Main </identifier>\n")
              .append("<symbol> { </symbol>\n")
              .append("<subroutineDec>\n")
              .append("<keyword> function </keyword>\n")
              .append("<keyword> void </keyword>\n")
              .append("<identifier> test </identifier>\n")
              .append("<symbol> ( </symbol>\n")
              .append("<parameterList>\n")
              .append("</parameterList>\n")
              .append("<symbol> ) </symbol>\n")
              .append("<subroutineBody>\n")
              .append("<symbol> { </symbol>\n")
              .append("<statements>\n")
              .append("<letStatement>\n")
              .append("<keyword> let </keyword>\n")
              .append("<identifier> a </identifier>\n")
              .append("<symbol> = </symbol>\n")
              .append("<expression>\n")
              .append("<term>\n")
              .append("<identifier> a </identifier>\n")
              .append("<symbol> [ </symbol>\n")
              .append("<expression>\n")
              .append("<term>\n")
              .append("<integerConstant> 2 </integerConstant>\n")
              .append("</term>\n")
              .append("</expression>\n")
              .append("<symbol> ] </symbol>\n")
              .append("</term>\n")
              .append("</expression>\n")
              .append("<symbol> ; </symbol>\n")
              .append("</letStatement>\n")
              .append("</statements>\n")
              .append("<symbol> } </symbol>\n")
              .append("</subroutineBody>\n")
              .append("</subroutineDec>\n")
              .append("<symbol> } </symbol>\n")
              .append("</class>");
        assertEquals(compiler.toXML(), output.toString());
    }
    
    
    public void testSubroutineTerm() {
        StringBuilder input = new StringBuilder();
        input.append("class Main {\n")
             .append("  function void test() {\n")
             .append("    let game = SquareGame.new();\n")
             .append("  }\n")
            .append("}\n");
        
        Tokenizer tokenizer = new JackTokenizer(input.toString());
        CompilationEngine compiler = new CompilationEngine(tokenizer);
        compiler.compileClass();
        
        StringBuilder output = new StringBuilder();
        output.append("<class>\n")
              .append("<keyword> class </keyword>\n")
              .append("<identifier> Main </identifier>\n")
              .append("<symbol> { </symbol>\n")
              .append("<subroutineDec>\n")
              .append("<keyword> function </keyword>\n")
              .append("<keyword> void </keyword>\n")
              .append("<identifier> test </identifier>\n")
              .append("<symbol> ( </symbol>\n")
              .append("<parameterList>\n")
              .append("</parameterList>\n")
              .append("<symbol> ) </symbol>\n")
              .append("<subroutineBody>\n")
              .append("<symbol> { </symbol>\n")
              .append("<statements>\n")
              .append("<letStatement>\n")
              .append("<keyword> let </keyword>\n")
              .append("<identifier> game </identifier>\n")
              .append("<symbol> = </symbol>\n")
              .append("<expression>\n")
              .append("<term>\n")
              .append("<identifier> SquareGame </identifier>\n")
              .append("<symbol> . </symbol>\n")
              .append("<identifier> new </identifier>\n")
              .append("<symbol> ( </symbol>\n")
              .append("<expressionList>\n")
              .append("</expressionList>\n")
              .append("<symbol> ) </symbol>\n")
              .append("</term>\n")
              .append("</expression>\n")
              .append("<symbol> ; </symbol>\n")
              .append("</letStatement>\n")                
              .append("</statements>\n")
              .append("<symbol> } </symbol>\n")
              .append("</subroutineBody>\n")
              .append("</subroutineDec>\n")
              .append("<symbol> } </symbol>\n")
              .append("</class>");
        assertEquals(compiler.toXML(), output.toString());
    }
    
}
