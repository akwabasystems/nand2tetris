// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Instruction decoding: figure out whether it is an A-instruction (MSB=0)
    // or a C-instruction (MSB=1).
    And (a=instruction[15], b=true, out=isCInstruction);
    Not (in=isCInstruction, out=isAInstruction);


    // If it is an A-instruction, then store the value of the specified
    // constant, which is represented by the remaining 15 bits, in A
    Mux16 (a=ALUOut,
           b=instruction,
           sel=isAInstruction,
           out=ARegisterIn);


    // A register
    // Will go to the A register if it is an A-instruction, or
    // if instruction[5] (d1 destination) is 1 (address of M)
    Or (a=isAInstruction, b=instruction[5], out=loadA);
    ARegister (in=ARegisterIn,
               load=loadA,
               out=AOut,
               out[0..14]=addressM
              );


    // D register
    // Will go to the D register if it is a C-instruction and instruction[4]
    // (d2 destination) is 1
    And (a=isCInstruction, b=instruction[4], out=loadD);
    DRegister (in=ALUOut,
               load=loadD,
               out=DOut
              );


    // Instruction execution
    // From the instruction, use the "a-" bit to determine whether the ALU
    // will operate on the A register or the Memory input.
    // If it is a C-instruction that operates on M, the "a-" bit (12th bit)
    // is 1; otherwise, it is 0.
    And (a=isCInstruction, b=instruction[12], out=selectAM);


    // Now, determine whether to input the value of A or that of M into the ALU
    Mux16 (a=AOut,
           b=inM,
           sel=selectAM,
           out=AMOut
           );


    // ALU configuration
    ALU ( x=DOut,
          y=AMOut,
          zx=instruction[11],     // c1: Zero the x input
          nx=instruction[10],     // c2: Negate the x input
          zy=instruction[9],      // c3: Zero the y input
          ny=instruction[8],      // c4: Negate the y input
          f=instruction[7],       // c5: Function code: 1 for add, 0 for and
          no=instruction[6],      // c6: Negate the out output
          out=ALUOut,             // ALU output
          out=outM,               // outM
          zr=zr,                  // 1 if out=0, 0 otherwise
          ng=ng                   // 1 if out<0, 0 otherwise
         );


    // WriteM
    // Write to M if it is a C-instruction and the "d3" bit (instruction[3])
    // is 1
    And (a=isCInstruction, b=instruction[3], out=writeM);

    // Jump logic
    // In order for a jump to occur, the instruction must be a C-instruction
    //
    // ZR (is zero)
    // In order to jump if out == 0, the "j2" bit (instruction[1]) must be 1
    And (a=isCInstruction, b=instruction[1], out=jumpEQ);
    And (a=jumpEQ, b=zr, out=jumpIfZero);

    // NG (is negative)
    // If order to jump if out < 0, the "j1" bit (instruction[2]) must be 1
    And (a=isCInstruction, b=instruction[2], out=jumpLT);
    And (a=jumpLT, b=ng, out=jumpIfNegative);

    // !ZR and !NG (is positive)
    // In order to jump if greater than 0, the "j3" bit (instruction[0]) must
    // be 1
    Not (in=zr, out=notZR);
    Not (in=ng, out=notNG);
    And (a=isCInstruction, b=instruction[0], out=jumpGT);
    And (a=notZR, b=notNG, out=isPositive);
    And (a=isPositive, b=jumpGT, out=jumpIfPositive);


    // Now, use the PC control bits to determine whether to jump
    // If there is a jump, then PC = A; otherwise, increment PC.
    // If Reset, reset the PC
    Or (a=jumpIfZero, b=jumpIfNegative, out=jumpLTE);
    Or (a=jumpLTE, b=jumpIfPositive, out=loadJump);
    Not (in=loadJump, out=notLoadJump);

    PC (in=AOut,
         load=loadJump,
         inc=notLoadJump,
         reset=reset,
         out[0..14]=pc
         );

}
