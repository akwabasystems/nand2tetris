/**
 * A class that represents character strings. In addition to constructing and disposing of strings, it also features methods for getting and 
 * setting individualvcharacters of the string, for erasing the string's last character, for appending a character to the string's end, and 
 * more typical string-oriented operations.
 */
class String {
    field int end;
    field Array characters;
    field int len;

    /** 
     * Constructs a new empty string with a maximum length of maxLength and initial length of 0.
     *
     * @param maxLength         the maximum length of the string
     * @return a reference to the base address of the newly constructed string
     */
    constructor String new(int maxLength) {

        if (maxLength < 0) {
            do Sys.error(14);
        }

        if (maxLength > 0) {
            let characters = Array.new(maxLength);
        }

        let end = maxLength;
        let len = 0;

        return this;
    }


    /**
     * Disposes of this string.
     */
    method void dispose() {
        if (end > 0) {
            do characters.dispose();
        }

        do Memory.deAlloc(this);
        return;
    }


    /**
     * Returns the current length of this string. 
     *
     * @return the current length of this string
     */
    method int length() {
        return len;
    }


    /** 
     * Returns the character at the j-th location of this string. 
     *
     * @param j         the location of the character to return
     * @return the character at the j-th location of this string
     */
    method char charAt(int j) {
        if ((j < 0) | (j > len) | (j = len)) {
            do Sys.error(15);
        }

        return characters[j];
    }


    /**
     * Sets the character at the j-th location of this string to c. 
     *
     * @param j         the location at which to set the new character
     * @param c         the character to set at the location
     */
    method void setCharAt(int j, char c) {
        if ((j < 0) | (j > len) | (j = len)) {
            do Sys.error(16);
        }

        let characters[j] = c;
        return;
    }


    /**
     * Appends c to the end of this string
     *
     * @param c         the character to append
     * @return a reference to this string
     */
    method String appendChar(char c) {
        if (len = end) {
            do Sys.error(17);
        }

        let characters[len] = c;
        let len = len + 1;
        return this;
    }


    /**
     * Erases the last character from this string. 
     */
    method void eraseLastChar() {
        if (len = 0) {
            do Sys.error(18);
        }

        let len = len - 1;
        return;
    }


    /**
     * Returns the integer value of this string until a non-digit character is detected.
     *
     * @return the integer value of this string
     */
    method int intValue() {
        var int i, value, c;
        var boolean isDigit;
        var boolean isNegative;

        if (len = 0) {
            return 0;
        } 
        
        let isDigit = true;
        
        if (characters[0] = 45) {
            let isNegative = true;
            let i = 1;
        }

        while ((i < len) & (isDigit)) {
            let c = characters[i] - 48;
            let isDigit = ~((c < 0) | (c > 9));

            if (isDigit) {
                let value = Math.multiply(value, 10) + c;
                let i = i + 1;
            }
        }

        if (isNegative) {
            let value = -value;
        }

        return value;
    }


    /** 
     * Sets this string to hold a representation of the given value. 
     *
     * @param val       the integer value to set for this string
     */
    method void setInt(int val) {
        var int a, b;
        var Array c;
        var boolean isNegative;

        if (end = 0) {
            do Sys.error(19);
        }

        let c = Array.new(6);
        
        if (val < 0) {
            let isNegative = true;
            let val = -val;
        }

        let b = val;

        while (b > 0) {
            let b = Math.divide(val, 10);
            let c[a] = 48 + (val - Math.multiply(b, 10)); 

            let a = a + 1;
            let val = b;
        }

        if (isNegative) {
            let c[a] = 45;
            let a = a + 1;
        }

        if (end < a) {
            do Sys.error(19);
        }

        if (a = 0) {
            let characters[0] = 48;
            let len = 1;
        } else {
            let len = 0;

            while (len < a) {
                let characters[len] = c[a - (len + 1)];
                let len = len + 1;
            }
        }

        do c.dispose();
        return;
    }


    /** 
     * Returns the new line character. 
     *
     * @return the new line character
     */
    function char newLine() {
        return 128;
    }


    /**
     * Returns the backspace character. 
     *
     * @return the backspace character
     */
    function char backSpace() {
        return 129;
    }


    /**
     * Returns the double quote (") character. 
     *
     * @return the double quote (") character
     */
    function char doubleQuote() {
        return 34;
    }

}

