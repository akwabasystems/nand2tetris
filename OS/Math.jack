/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

	static int twoSquares;
	static int accumulator;

	/** 
	 * Initializes this Math library. This initialization includes the creation of an array that caches the
	 * values of the first 15 powers of 2, which is used to speed up the computation of multiplications
	 * and divisions.
	 */
	function void init() {
		var int i;
		let accumulator = Array.new(16);
		let twoSquares = Array.new(16);
		let twoSquares[0] = 1;

		while (i < 15) {
			let i = i + 1;
			let twoSquares[i] = twoSquares[i - 1] + twoSquares[i - 1];
		}

		return;
	}


	/** 
	 * Returns the absolute value of x. 
	 *
	 * @param x			the number for which to return the absolute value
	 * @return the absolute value of the specified number
	 */
	function int abs(int x) {
		if (x < 0) {
			let x = -x;
		}

		return x;
	}


	/** 
	 * Returns the product of x and y. 
	 * 
	 * When a Jack compiler detects the multiplication operator '*' in the  program's code, it handles it
	 * by invoking this method. In other words, the Jack expressions x*y and multiply(x,y) return the same value.
	 *
	 * @param x			the first operand
	 * @param y			the second operand
	 * @return the product of x and y
	 */
	function int multiply(int x, int y) {
		var int a, b, sum, i;
		var boolean e;

		let e = ((x < 0) & (y > 0)) | ((x > 0) & (y < 0));
		let x = Math.abs(x);
		let y = Math.abs(y);

		if (x < y) {
			let b = x;
			let x = y;
			let y = b;
		}

		while ((sum - 1) < (y - 1)) {
			if (~((twoSquares[i] & y) = 0)) {
				let a = a + x;
				let sum = sum + twoSquares[i];
			}

			let x = x + x;
			let i = i + 1;
		}

		if (e) {
			let a = -a;
		}

		return a;
	}


    /** 
	 * Returns the integer part of x/y.
     * 
	 * When a Jack compiler detects the multiplication operator '/' in the program's code, it handles it 
	 * by invoking this method. In other words, the Jack expressions x/y and divide(x,y) return the same value.
	 *
	 * @param x			the first operand
	 * @param y			the second operand
	 * @return the integer part of x/y
     */
	function int divide(int x, int y) {
		var int i, j;
		var boolean isNegative;
		var boolean k;

		if (y = 0) {
			do Sys.error(3);
		}

		let isNegative = ((x < 0) & (y > 0)) | ((x > 0) & (y < 0));

		let accumulator[0] = Math.abs(y);
		let x = Math.abs(x);

		while ((i < 15) & (~k)) {
			let k = ((32767 - (accumulator[i] - 1)) < (accumulator[i] - 1));

			if (~k) {
				let accumulator[i + 1] = accumulator[i] + accumulator[i];
				let k = ((accumulator[i + 1] - 1) > (x - 1));

				if (~k) {
					let i = i + 1;
				}
			}
		}

		while (i > -1) {
			if (~((accumulator[i] - 1) > (x - 1))) {
				let j = j + twoSquares[i];
				let x = x - accumulator[i];
			}

			let i = i - 1;
		}

		if (isNegative & (~(j = 0))) {
			let j = -j;
		}

		return j;

	}


	/** 
	 * Returns the integer part of the square root of x. 
	 *
	 * @param x			the number for which to return integer part of the square root
	 * @return the integer part of the square root of x
	 */
	function int sqrt(int x) {
		var int i, j, k, result;

		if (x < 0) {
			do Sys.error(4);
		}

		let i = 7;
		
		while (i > -1) {
			let j = result + twoSquares[i];
			let k = Math.multiply(j, j);
			
			if ((~(k > x)) & (~(k < 0))) {
				let result = j;
			}

			let i = i - 1;
		}

		return result;
	}


	/** 
	 * Returns the greater of a and b.
	 *
	 * @param a			the first operand
	 * @param b			the second operand
	 * @return the greater of a and b
	 */
	function int max(int a, int b) {
		if (a > b) {
			return a;
		} else {
			return b;
		}
	}


    /** 
	 * Returns the smaller of a and b.
	 *
	 * @param a			the first operand
	 * @param b			the second operand
	 * @return the smaller of a and b
	 */
	function int min(int a, int b) {
		if (a < b) {
			return a;
		} else {
			return b;
		}
	}
}
