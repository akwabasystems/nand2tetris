/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {

    /**
     * Initializes the keyboard.
     */
    function void init() {
        return;
    }


    /**
     * Returns the character of the currently pressed key on the keyboard. If no key is
     * currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     *
     * NEW_LINE = 128 = String.newline()
     * BACKSPACE = 129 = String.backspace()
     * LEFT_ARROW = 130
     * UP_ARROW = 131
     * RIGHT_ARROW = 132
     * DOWN_ARROW = 133
     * HOME = 134
     * END = 135
     * PAGE_UP = 136
     * PAGE_DOWN = 137
     * INSERT = 138
     * DELETE = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     *
     * @return the character for the currently pressed key on the keyboard
     */
    function char keyPressed() {
        return Memory.peek(24576);
    }


    /**
     * Waits until a key is pressed on the keyboard and released, then echoes the key to the screen,
     * and returns the character of the pressed key.
     *
     * @return the character for the pressed key
     */
    function char readChar() {
        var int keyCode;
        var char c;

        do Output.printChar(0);

        while ((c = 0) | (keyCode > 0)) {
            let keyCode = Keyboard.keyPressed();

            if (keyCode > 0) {
                let c = keyCode;
            }
        }

        do Output.printChar(String.backSpace());
        do Output.printChar(c);

        return c;
    }


    /**
     * Displays a message on the screen, reads from the keyboard the entered text until a newline character
     * is detected, echoes the text to the screen, and returns its value. Also handles user backspaces.
     *
     * @param message       the message to display as prompt
     * @return the string entered from the keyboard
     */
    function String readLine(String message) {
        var char c;
        var char newLine;
        var char backSpace;
        var String line;
        var boolean isNewLine;

        let line = String.new(80);
        do Output.printString(message);
        let newLine = String.newLine();
        let backSpace = String.backSpace();

        while (~isNewLine) {
            let c = Keyboard.readChar();
            let isNewLine = (c = newLine);

            if (~isNewLine) {
                if (c = backSpace) {
                    do line.eraseLastChar();
                } else {
                    let line = line.appendChar(c);
                }
            }
        }

        return line;
    }


    /**
     * Displays the message on the screen, reads from the keyboard the entered text until a newline character
     * is detected, echoes the text to the screen, and returns its integer value (until the first non-digit
     * character in the entered text is detected). Also handles user backspaces.
     *
     * @param message       the message to display as prompt
     * @return the integer entered from the keyboard
     */
    function int readInt(String message) {
        var String line;
        var int value;

        let line = Keyboard.readLine(message);
        let value = line.intValue();
        do line.dispose();

        return value;
    }
}
